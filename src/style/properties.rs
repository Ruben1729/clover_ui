use crate::style::{Color, Spacing};
use util_macros::DeriveStyleKeys;

#[derive(Debug, Clone, DeriveStyleKeys)]
pub enum StyleProperty {
    Padding(Spacing),
    Margin(Spacing),
    BorderColor(Color),
    BorderWidth(Spacing),
    Height(usize),
    Width(usize),
    X(usize),
    Y(usize),
    BackgroundColor(Color),
    Color(Color),
    FontFamily(Option<String>),
    FontSize(f32),
}

#[cfg(test)]
mod tests {
    use util_macros::DeriveStyleKeys;
    #[derive(Debug, PartialEq, Eq, Clone, DeriveStyleKeys)]
    pub enum TestValue {
        Padding(usize),
        Margin(String),
    }

    #[test]
    fn test_derive_style_property() {
        let mut map = TestValueMap::new();
        // Test default values
        assert_eq!(map.get(TestValueKey::Padding), TestValue::Padding(0));
        assert_eq!(map.get(TestValueKey::Margin), TestValue::Margin("".to_string()));

        // Test generic setters and getters generated by the macro
        map.set(TestValue::Padding(10));
        map.set(TestValue::Margin("string test".to_string()));
        assert_eq!(map.get(TestValueKey::Padding), TestValue::Padding(10));
        assert_eq!(map.get(TestValueKey::Margin), TestValue::Margin("string test".to_string()));


        // Test setters and getters generated by the macro
        map.set_padding(50);
        map.set_margin("another test".to_string());
        assert_eq!(map.get_padding(), 50);
        assert_eq!(map.get_margin(), "another test".to_string());
    }
}
